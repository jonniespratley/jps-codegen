<?php /** * I am the Database Access Layer, I can manipulate the database. *  * @COPYWRITE * * @version CodeGen - @CG_VERSION * @author CodeGen - @CG_AUTHOR * * @package @NAMESPACE_AS3 * @name @TABLE_UFIRSTService.php */require_once "@DATABASEConnection.php";require_once "vo/@TABLE_UFIRSTVO.php";class @TABLE_UFIRSTService{	private $conn;	/**	 * I am the instance of a Database Access Object	 *	 * @return [link]	 */	public function __construct()	{		//TODO: need to enter in the proper credentials		$conn = new @DATABASEConnection();		$this->conn = $conn;	}	/**	 * I get all records from the specified database and table	 * @return [array]	 */	public function getAll@TABLE_UFIRST()	{		return $this->_executeReturn("SELECT * FROM @DATABASE.@TABLE");	}	/**	 * I get one record from the specified database and table.	 *	 * @param [string] $keyvalue the value of your request	 * @return [array] the matching record	 */	public function getOne@TABLE_UFIRST($keyvalue)	{		return $this->_executeReturn("SELECT * 										FROM @DATABASE.@TABLE 										WHERE ".$this->_getKey()." = $keyvalue");	}	/**	 * I save a record to the specified database and table	 * @param [string] $vo the name/value object	 * @return [array] the inserted record	 */	public function save@TABLE_UFIRST($vo)	{		$choice = '';		$primarykey = $this->_getKey();		$primarykeyValue = $vo[$primarykey];		if ($primarykeyValue == 0 || $primarykeyValue == '')		{			$choice = $this->create@TABLE_UFIRST($vo);		}		else		{			$choice = $this->update@TABLE_UFIRST($vo);		}		return $choice;	}	/**	 * I update a record in the database/table	 *	 * @param [string] $vo the name/value object	 * @return [array] the inserted object	 */	private function update@TABLE_UFIRST($vo)	{		//get the primary key		$key = $this->_getKey();		//value of the key		$keyvalue = '';		//check if the object has a key with the same value as the primary key		if (array_key_exists($key, $vo))		{			//set the keyvalue variable to the array key inside the object,			//the key should be the same name as the key in the table			$keyvalue = $vo[$key];		}		//get the columns, the columns should be the name of the keys		//Get the name=values for the update set		$updateSet = '';		foreach ($vo as $name=>$value)		{			$updateSet .= $name.' = '.@DATABASEConnection::escape($value).', ';		}		$updateSet = @DATABASEConnection::trimSQL($updateSet);		//build the query		$sql = "UPDATE @DATABASE.@TABLE SET $updateSet WHERE $key = ".@DATABASEConnection::escape($keyvalue);		//return sql for debugging		//return $this->_returnSQL ( $sql );		return $this->conn->execute($sql);	}	/**	 * I create a new record in the database/table	 *	 * @param [string] $vo the name/value object	 * @return [boolean] the inserted object	 */	private function create@TABLE_UFIRST($vo)	{		//get the columns, the columns should be the name of the keys		$voColumns = '';		$voValues = '';		foreach ($vo as $column=>$value)		{			$voColumns .= $column.', ';			$voValues .= @DATABASEConnection::escape($value).', ';		}		$voColumns = @DATABASEConnection::trimSQL($voColumns);		$voValues = @DATABASEConnection::trimSQL($voValues);		//build the query		$sql = "INSERT @DATABASE.@TABLE ( $voColumns ) VALUES ( $voValues )";		//return		//return $this->_returnSQL ( $sql );		return $this->conn->execute($sql);	}	/**	 * I remove a record from the specified database/table	 *	 * @param [string] $keyvalue the value of the key	 * @return [boolean] the result	 */	public function remove@TABLE_UFIRST($vo)	{		$keyvalue = $vo[$this->_getKey()];		return $this->conn->execute("DELETE FROM @DATABASE.@TABLE WHERE ".$this->_getKey()." = '$keyvalue'");	}	/**	 * I get the primary key for table.	 *	 * @return [string] the name of the primary key	 */	private function _getKey()	{		$keys = $this->conn->executeAndReturn("SHOW INDEX FROM @DATABASE.@TABLE");		$primaryKey = '';		foreach ($keys as $key)		{			if ($key['Key_name'] == 'PRIMARY')			{				$primaryKey = $key['Column_name'];			}		}		return $primaryKey;	}	/**	 * I map the resulting recordset to a @TABLE object.	 *	 * @param [result] a result from a database query	 * @return [array] an array of @TABLE_UFIRST objects	 */	private function _mapObjectTo@TABLE_UFIRST($obj)	{		$array = array ();		while ($row = mysqli_fetch_assoc($obj))		{			$vo = new @TABLE_UFIRSTVO();			foreach ($row as $key=>$value)			{				$vo->__set($key, $value);			}			$array[] = $vo;		}		return $array;	}	/**	 * I execute a statment on the database, and return a array of	 * @TABLE objects.	 *	 * @param [string] the query string to execute	 * @return [array] array of @TABLE_UFIRST objects	 */	private function _executeReturn($sql)	{		$query = $this->conn->execute($sql);		if ($query)		{			return $this->_mapObjectTo@TABLE_UFIRST($query);		}		else		{			return false;		}	}	/**	 * I execute a raw query and return the result.	 * @param [string] $sql the query	 */	private function _execute($sql)	{		$query = $this->conn->execute($sql);		if ($query)		{			return $this->_mapObject($query);		}		else		{			return false;		}	}	private function _returnSQL($sql)	{		return $sql;	}}/** ============================================================================================== * REST SERVICE FOR CLASS * ============================================================================================== *///Set up the variables for the calls$mode = '';$query = '';/* ******************************************** * Switch based on the mode * ********************************************/$service = new @TABLE_UFIRSTService();switch($_SERVER['REQUEST_METHOD']){	case 'GET':		$query = $_GET;		if ( isset ($_GET['m']))		{			$mode = $_GET['m']; //Mode			unset ($query['m']);		}		switch($mode)		{			case 'get':				$result = $service->getAll@TABLE_UFIRST();				echo json_encode($result);				break;			case 'getOne':				$result = $service->getOne($query);				echo json_encode($result);				break;		}	break;	case 'POST':		$query = $_POST;		if ( isset ($_POST['m']))		{			$mode = $_POST['m']; //Mode			unset ($query['m']);		}		switch($mode)		{			case 'save':				$result = $service->save@TABLE_UFIRST($query);				echo json_encode($result);				break;			case 'remove':				$result = $service->remove@TABLE_UFIRST($query);				echo json_encode($result);				break;		}	break;}?>