<?php/**My Test Application*//** * I am the Database Access Layer, I can manipulate the database. *  * @version CodeGen - 1.8 * @author CodeGen - Jonnie Spratley (http://jonniespratley.com/code) * * @package com.domain.project * @name UsersService.php */ require_once ( 'codegenConnection.php' );require_once ( 'vo/UsersVO.php' );class UsersService{	private $conn;		/**	 * I am the instance of a Database Access Object	 *	 * @return [link]	 */	public function __construct()	{		//TODO: need to enter in the proper credentials		$conn = new codegenConnection ();		$this->conn = $conn;	}	 	/**	 * I get all records from the specified database and table	 * @return [array]	 */	public function getAllUsers()	{		return $this->_executeReturn ( "SELECT * FROM codegen.users" );	}		/**	 * I get one record from the specified database and table.	 *	 * @param [string] $keyvalue the value of your request	 * @return [array] the matching record	 */	public function getOneUsers( $keyvalue )	{		return $this->_executeReturn ( "SELECT * 										FROM codegen.users 										WHERE ".$this->_getKey()." = $keyvalue" );	}		/**	 * I save a record to the specified database and table	 * @param [string] $vo the name/value object	 * @return [array] the inserted record	 */	public function saveUsers( $vo )	{		$choice = '';				$primarykey = $this->_getKey();		$primarykeyValue = $vo[ $primarykey ];			if ( $primarykeyValue == 0 || $primarykeyValue == '' )		{			$choice = $this->createUsers( $vo );		}		else		{			$choice = $this->updateUsers( $vo );		}		return $choice;	}		/**	 * I update a record in the database/table	 *	 * @param [string] $vo the name/value object	 * @return [array] the inserted object	 */	private function updateUsers( $vo )	{		//get the primary key		$key = $this->_getKey();				//value of the key		$keyvalue = '';				//check if the object has a key with the same value as the primary key		if ( array_key_exists( $key, $vo ) )		{			//set the keyvalue variable to the array key inside the object, 			//the key should be the same name as the key in the table			$keyvalue = $vo[ $key ];		}				//get the columns, the columns should be the name of the keys		//Get the name=values for the update set		$updateSet = '';				foreach ( $vo as $name => $value )		{			$updateSet .= $name . ' = ' . codegenConnection::escape ( $value ) . ', ';		}				$updateSet = codegenConnection::trimSQL ( $updateSet );				//build the query		$sql = "UPDATE codegen.users SET $updateSet WHERE $key = ".codegenConnection::escape ( $keyvalue );				//return sql for debugging		//return $this->_returnSQL ( $sql );				return $this->conn->execute ( $sql );	}		/**	 * I create a new record in the database/table	 *	 * @param [string] $vo the name/value object	 * @return [boolean] the inserted object	 */	private function createUsers( $vo )	{		//get the columns, the columns should be the name of the keys		$voColumns = '';		$voValues = '';				foreach ( $vo as $column => $value )		{			$voColumns .= $column . ', ';			$voValues .= codegenConnection::escape ( $value ) . ', ';		}		$voColumns = codegenConnection::trimSQL ( $voColumns );		$voValues = codegenConnection::trimSQL ( $voValues );				//build the query		$sql = "INSERT codegen.users ( $voColumns ) VALUES ( $voValues )";				//return		//return $this->_returnSQL ( $sql );		return $this->conn->execute ( $sql );	}		/**	 * I remove a record from the specified database/table	 *	 * @param [string] $keyvalue the value of the key	 * @return [boolean] the result	 */	public function removeUsers( $vo )	{		$keyvalue = $vo[ $this->_getKey() ];				return $this->conn->execute( "DELETE FROM codegen.users WHERE ".$this->_getKey()." = '$keyvalue'" );	}		/**	 * I get the primary key for table.	 *	 * @return [string] the name of the primary key	 */	private function _getKey()	{		$keys = $this->conn->executeAndReturn( "SHOW INDEX FROM codegen.users" );		$primaryKey = '';				foreach( $keys as $key )		{			if ( $key['Key_name'] == 'PRIMARY' )			{				$primaryKey = $key['Column_name'];			}		}		return $primaryKey;	}		/**	 * I map the resulting recordset to a users object.	 *	 * @param [result] a result from a database query	 * @return [array] an array of Users objects	 */	private function _mapObjectToUsers( $obj )	{		$array = array ();		while ( $row = mysqli_fetch_assoc ( $obj ) )		{			$vo = new UsersVO ();			foreach ( $row as $key => $value )			{				$vo->__set ( $key, $value );			}			$array [] = $vo;		}		return $array;	}		/**	 * I execute a statment on the database, and return a array of	 * users objects.	 *	 * @param [string] the query string to execute	 * @return [array] array of Users objects	 */	private function _executeReturn( $sql )	{		$query = $this->conn->execute ( $sql );				if ( $query )		{			return $this->_mapObjectToUsers( $query );		}		else		{			return false;		}	}		/**	 * I execute a raw query and return the result.	 * @param [string] $sql the query	 */	private function _execute( $sql )	{		$query = $this->conn->execute ( $sql );				if ( $query )		{			return $this->_mapObject ( $query );		}		else		{			return false;		}	}			private function _returnSQL( $sql )	{		return $sql;	}	}/** ============================================================================================== * REST SERVICE FOR CLASS * ============================================================================================== */if ( isset ( $_GET ) ){		//Set up the variables for the calls	$mode = '';	$query = $_GET;		if ( isset ( $_GET [ 'm' ] ) )	{		$mode = $_GET [ 'm' ]; //Mode		unset ( $query [ 'm' ] );	}	/* ******************************************** * Switch based on the mode * ********************************************/		$service = new UsersService( );	switch ( $mode )	{		case 'get':			$result = $service->getAllUsers();			echo json_encode ( $result );		break;				case 'getOne':			$result = $service->getOne ( $query );			echo json_encode ( $result );		break;				case 'save':			$result = $service->saveUsers( $query );			echo json_encode ( $result );		break;				case 'remove':			$result = $service->removeUsers( $query );			echo json_encode ( $result );		break;		}} //ends $_GET?>       