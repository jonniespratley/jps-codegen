<?php
/**
@COPYWRITE
*/
/**
 * I am the Database Access Layer, I can manipulate the database.
 * 
 * @version CodeGen - @CG_VERSION
 * @author CodeGen - @CG_AUTHOR
 *
 * @package @NAMESPACE_AS3
 * @name @TABLE_UFIRSTService.php
 */
 
require_once "Connection.php'";
require_once "ValueObject.php'";

class DataAccessObject
{
	
	private $conn;
	
	/**
	 * I am the instance of a Database Access Object
	 *
	 * @return [link]
	 */
	public function __construct()
	{
		$conn = new Connection ( 'localhost', 'root', 'fred' );
		
		$this->conn = $conn;
	}
	
	/**
	 * I get all records from the specified database and table
	 *
	 * @param [string] $database the database name
	 * @param [string] $table the table name
	 * @return [array]
	 */
	public function getAll( $database, $table )
	{
		return $this->_execute ( "SELECT * FROM $database.$table" );
	}
	
	/**
	 * I get one record from the specified database and table.
	 *
	 * @param [string] $database the database
	 * @param [string] $table the table
	 * @param [string] $primarykey the primary key
	 * @param [string] $value the value of your request
	 * @return [array] the matching record
	 */
	public function getOne( $database, $table, $index )
	{
		return $this->_execute ( "SELECT * FROM $database.$table WHERE " . $this->_getKey ( $database, $table ) . " = $index" );
	}
	
	/**
	 * I save a record to the specified database and table
	 *
	 * @param [string] $database the database
	 * @param [string] $table the table
	 * @param [string] $primarykey the primary key
	 * @param [string] $keyvalue the value of the primary key
	 * @param [string] $vo the name/value object
	 * @return [array] the inserted record
	 */
	public function saveData( $database, $table, $vo )
	{
		$choice = '';
		
		$primarykey = $this->_getKey ( $database, $table );
		$primarykeyValue = $vo [ $primarykey ];
		
		if ( $primarykeyValue == 0 || $primarykeyValue == '' )
		{
			$choice = $this->create ( $database, $table, $vo );
		}
		else
		{
			$choice = $this->update ( $database, $table, $vo );
		}
		return $choice;
	}
	
	/**
	 * I update a record in the database/table
	 *
	 * @param [string] $database the database
	 * @param [string] $table the table
	 * @param [string] $primarykey the primary key
	 * @param [string] $keyvalue the value of the key
	 * @param [string] $vo the name/value object
	 * @return [array] the inserted object
	 */
	public function update( $database, $table, $vo )
	{
		//get the primary key
		$key = $this->_getKey ( $database, $table );
		
		//value of the key
		$keyvalue = '';
		
		//check if the object has a key with the same value as the primary key
		if ( array_key_exists ( $key, $vo ) )
		{
			//set the keyvalue variable to the array key inside the object, 
			//the key should be the same name as the key in the table
			$keyvalue = $vo [ $key ];
			echo '<li>Index Column: ' . $key . '</li>';
			echo '<li>Index Value: ' . $keyvalue . '</li>';
		}
		
		//get the columns, the columns should be the name of the keys
		

		//Get the name=values for the update set
		$updateSet = '';
		
		foreach ( $vo as $name => $value )
		{
			$updateSet .= $name . ' = ' . Connection::escape ( $value ) . ', ';
		}
		
		$updateSet = Connection::trimSQL ( $updateSet );
		
		//build the query
		$sql = "UPDATE $database.$table SET $updateSet WHERE $key = $keyvalue";
		
		//return sql for debugging
		return $this->_returnSQL ( $sql );
	}
	
	/**
	 * I create a new record in the database/table
	 *
	 * @param [string] $database the database
	 * @param [string] $table the table
	 * @param [string] $vo the name/value object
	 * @return [array] the inserted object
	 */
	public function create( $database, $table, $vo )
	{
		//get the columns, the columns should be the name of the keys
		$voColumns = '';
		$voValues = '';
		
		foreach ( $vo as $column => $value )
		{
			$voColumns .= $column . ', ';
			$voValues .= Connection::escape ( $value ) . ', ';
		}
		$voColumns = Connection::trimSQL ( $voColumns );
		$voValues = Connection::trimSQL ( $voValues );
		
		//build the query
		$sql = "INSERT $database.$table ( $voColumns ) VALUES ( $voValues )";
		
		//return
		return $this->_returnSQL ( $sql );
	}
	
	/**
	 * I remove a record from the specified database/table
	 *
	 * @param [string] $database the database
	 * @param [string] $table the table
	 * @param [string] $primarykey the primary key
	 * @param [string] $keyvalue the value of the key
	 * @return [string] the id removed
	 */
	public function remove( $database, $table, $index )
	{
		return $this->conn->execute ( "DELETE FROM $database.$table WHERE " . $this->_getKey ( $database, $table ) . " = $index" );
	}
	
	private function _getKey( $database, $table )
	{
		$keys = $this->conn->executeAndReturn ( "SHOW INDEX FROM $database.$table" );
		$primaryKey = '';
		
		foreach ( $keys as $key )
		{
			if ( $key [ 'Key_name' ] == 'PRIMARY' )
			{
				$primaryKey = $key [ 'Column_name' ];
			}
		}
		return $primaryKey;
	}
	
	private function _mapObject( $obj )
	{
		$array = array ();
		while ( $row = mysqli_fetch_assoc ( $obj ) )
		{
			$vo = new ValueObject ( );
			foreach ( $row as $key => $value )
			{
				$vo->__set ( $key, $value );
			}
			$array [] = $vo;
		}
		return $array;
	}
	
	private function _execute( $sql )
	{
		$query = $this->conn->execute ( $sql );
		
		if ( $query )
		{
			return $this->_mapObject ( $query );
		}
		else
		{
			return false;
		}
	}
	
	private function _returnSQL( $sql )
	{
		return $sql;
	}

}

/** ==============================================================================================
 * CLASS TESTING
 

$updateVO = array ( 
	'id' => 5, 'title' => 'This record just got updated', 'body' => 'Dont you just love oo programming?' 
);
$createVO = array ( 
	'id' => 0, 'title' => 'This is a new post', 'body' => 'I really dont know what to say here but I like angels and airwaves' 
);

$database = 'codegen';
$table = 'posts';
$key = 'id';

echo '<pre>';

echo '<h2>Universal Value Object</h2>';
$vo = new ValueObject ( );
$vo->__set ( 'id', 0 );
$vo->__set ( 'title', 'Flex Value Object' );
$vo->__set ( 'body', 'This is just a sample get and set value objerct' );

print_r ( $vo );

echo '<h2>Universal DataAccess Object</h2>';
$service = new DataAccessObject ( );

echo '<h2>getAll(database, table)</h2>';
print_r ( $service->getAll ( $database, $table ) );

echo '<h2>getOne(database, table, value)</h2>';
print_r ( $service->getOne ( $database, $table, 5 ) );

echo '<h2>update(database, table, value)</h2>';
print_r ( $service->update ( $database, $table, $updateVO ) );

echo '<h2>create(database, table, value)</h2>';
print_r ( $service->create ( $database, $table, $createVO ) );

//echo '<li>multiSelect(database, table, table, value)</li>';
//print_r ( $service->multiSelect( $database, 'posts', 'users', 'id' ) );


echo '<li>remove(database, table, value)</li>';
//print_r ( $service->remove ( $database, $table, 9 ) );


echo '</pre>';
* ============================================================================================== */
?>